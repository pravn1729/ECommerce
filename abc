Salesvision UI Workflow

Salesvision   Spring,Struts .. jsp+Extjs+taglibs 
 
Important Files:

•	Nav-config.txt – Configures the Tab Names
•	Dispatcher-servlet.xml – Front Controller containing the url mappings and beans
•	Propertymetadata.xml – Interface between the UI and Java code
•	Salesvision-metadata.jsp – Makes the xml data available to js code.Appends the metadata to SALESVISION namespace
•	header-data-explorer-beta.jsp, Header-finance.jsp  etc – Tab Menus with privileges
•	Build.apt – Maven build types
•	Template-ext-tabs.jsp – Tabs with privileges
•	Build-javascript.xml – Combines related JS Code snippets into single code.
•	Normal Jsp includes tagslibs and partial extjs code
•	Salesvision.properties  Loads in ApplicationUtil.java
•	Base Reusable Controllers (Searchcontroller, updatecontroller,updatecontroller) and custom controllers

ExtJs version: 2.2
http://docs.sencha.com/extjs/2.3.0/



Custom Salesvision Components:
The Extjs components are overridden  with components below for the developers to reuse and have a standard way of implementation among the developers.
Salesvision.js
Salesvision-core.js
Salesvision-form.js
Salesvision-grid.js etc

Page Architecture: 
Page and Page Detail (Reusable Page code is taken from Salesvision-core)
•	Create a Page function upon the salesvision page.
               SALESVISION.BaseAccountProductPage (SALESVISION.AccountProductPage)  extends SALESVISION.Page – Contains logic for initializing grid, adding menus, configuring metadata for grid and urls
•	Register this page with the custom created Registry 
SALESVISION.AccountProductRegistry upon SALESVISION.PageRegistry.
•	The New page object is placed inside the registry.
              SALESVISION.AccountProductPageImpl = new SALESVISION.AccountProductPage();
              SALESVISION.AccountProductRegistry.setPage(SALESVISION.AccountProductPageImpl);
Salesvision-general-search-layout.js does the switching of menu tabs between the AccountProduct, Account etc. All the scripts are combined into sv-general-base.js , sv-client-hierarchy-base.js and sv-general-app.js files which are placed in generalSearch.jsp.
Similarly there are other pages like workflowProcessing.jsp, salesCredit.jsp

Fields:
new SALESVISION.TextField({beanKey:'firm', propertyKey:'firSec'})  beankey refers to the id in propertymetadata (<BeanMetadata key="firm"   ) 
The propertyKey firSec picks the attribute details of width, grid visibility details and reuses the data from the propertymetadata instead of mentioning manually in rendering the grid and form fields. 


Filters: web.xml
CSRFFilter.java, HostHeaderFilter.java etc

Configuration xml’s
sv-context-core.xml
dispatcher-servlet.xml
sv-security-context-core.xml
sv-security-context-web.xml
datasource-context.xml

Contains the url mappings and beans.

BaseControllers:
SearchController, UpdateController, DeleteController
https://www.mkyong.com/spring-mvc/spring-mvc-form-handling-annotation-example/



PropertyMetadata and BeanMetadata.java
If a new bean is defined in propertymetadata.xml it must be registered in BeanMetadata.java BeanType enum.
This helps in plugging the sorting field to the IBatis file


Services:
Default***Service.java (DefaultAccountProductService.java)

IBatis file (AccountProduct.xml):
The values are binded to the resultMaps and they are returned in the form of objects.

AccountProductSearch.java  Used for sending the searchdata to the ibatis file. This Might not contain the RefCode object types as they most use String
AccountProuduct.java  Used for binding the results of the searchquery. Can have RefCode type objects as the handlers takes care of making them to objects and bind to AccountProduct.java file

We plugin the callback functions into the Salesvision core component Ajax calls (SALESVISION.JsonProxy etc) and render the data as required.

Debug
Firefox FireBug or Developer tools to debug javascript code.


